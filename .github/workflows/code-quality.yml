name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Format check with Black
      run: |
        black --check --diff src/ tests/ examples/
    
    - name: Import sorting check with isort
      run: |
        pip install isort
        isort --check-only --diff src/ tests/ examples/
    
    - name: Lint with flake8
      run: |
        flake8 src/ tests/ examples/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Type check with mypy
      run: |
        mypy src/snowpyt_mechparams --ignore-missing-imports
    
    - name: Security check with bandit
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
    
    - name: Dependency check with safety
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        if-no-files-found: ignore

  docstring-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install interrogate
    
    - name: Check docstring coverage
      run: |
        interrogate src/snowpyt_mechparams --ignore-init-method --ignore-magic --ignore-module --fail-under=80 -v

  performance:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install pytest-benchmark
    
    - name: Run performance benchmarks
      run: |
        # Create simple benchmark test
        cat > test_benchmark.py << 'EOF'
        import numpy as np
        import pytest
        from snowpyt_mechparams import estimate_density_from_hardness, estimate_shear_strength
        
        def test_density_estimation_performance(benchmark):
            hardness = np.random.randint(1, 7, 1000)
            result = benchmark(estimate_density_from_hardness, hardness)
            assert len(result) == 1000
        
        def test_strength_estimation_performance(benchmark):
            density = np.random.uniform(100, 500, 1000)
            result = benchmark(estimate_shear_strength, density)
            assert len(result) == 1000
        EOF
        
        pytest test_benchmark.py --benchmark-only --benchmark-json=benchmark.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json
        if-no-files-found: ignore
